#!/bin/sh
set -e     # Abort upon error
set -u     # Abort upon udefined variable
#set -x     # Print every command

readonly path="$(dirname `readlink -f "$0"`)"

#######################################
#   Description:
#       Continue installation in chrooted env
#   Usage:
#       ./chroot
#   Arguments:
#        None
#   Returns:
#       0 upon success
#       >=1 upon error
#######################################
main() {
    # Check if $USAGE is respected
    readonly USAGE='Usage: ./chroot'
    [ "$#" -eq 0 ] || { err "Error: 0 argument(s) expected, $# received"; err "$USAGE"; return 1; }

    # Arguments
    readonly hostname="$(cat /etc/hostname)"
    [ -f "$path/env/$hostname.env" ] || { err "Error: no env file was found for '$hostname'"; return 2; }

    load_env
    user_create
    locale_update
    packages_install
    aur_install paru-bin dashbinsh $AI_SYSTEM_PACKAGES_AUR_EXTRA
    x_install
    grub_install

    # Copy post_install
    mv /root/post_install "/home/$AI_USER_NAME"
    chown "$AI_USER_NAME:$AI_USER_NAME" "/home/$AI_USER_NAME/post_install"
}

# Load env
load_env() {
    # Load general and specific .env
    set -a
    . "$path/env/env"
    . "$path/env/$hostname.env"
    set +a
}

# Create unprivileged user
user_create() {
    useradd -m -G wheel -s /bin/bash "$AI_USER_NAME"
    passwd "$AI_USER_NAME"
}

# Updates locales and generate
locale_update() {
    hwclock --systohc

    if [ -z "$AI_SYSTEM_KEYMAP" ]; then
        localectl set-keymap "$AI_SYSTEM_KEYMAP"
        localectl set-x11-keymap "$AI_SYSTEM_KEYMAP"
    fi

    locale-gen
}

# Install packages
packages_install() {
    pacman -Syu --needed \
        sudo git vim curl wget dash nano man-pages man-db xsv \
        htop dnsutils networkmanager networkmanager-openvpn \
        reflector os-prober grub efibootmgr \
        pipewire pipepiwe-alsa pipepiwe-pulse pipepiwe-jack pamixer pulsemixer \
        $AI_SYSTEM_PACKAGES_EXTRA

    # Enable NetworkManager
    ln -s /usr/lib/systemd/system/NetworkManager.service /etc/systemd/system/multi-user.target.wants/NetworkManager.service
    ln -s /usr/lib/systemd/system/NetworkManager-dispatcher.service /etc/systemd/system/dbus-org.freedesktop.nm-dispatcher.service
    ln -s /usr/lib/systemd/system/NetworkManager-wait-online.service /etc/systemd/system/network-online.target.wants/NetworkManager-wait-online.service

    # Enable optional services
    for daemon in tlp bumblebee nftables; do
        # Enable
        sf="/usr/lib/systemd/system/$daemon.service"
        [ ! -f "$sf" ] || ln -s "$sf" "/etc/systemd/system/$(cat "$sf" | grep WantedBy | cut -d'=' -f2).wants/$daemon.service"

        # Add user to group
        for group in "$daemon" "$daemon"d; do
            if getent group | grep -q "$group"; then
                gpasswd -a "$AI_USER_NAME" "$group"
            fi
        done
    done

    # Configure sudo
    sed -i 's/#%wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/' /etc/sudoers
}

# Install X env
x_install() {
    [ "$AI_USER_NAME" = true ] || return 0

    pacman -S --needed \
        xorg-server xorg-apps mesa \
        libxinerama autorandr xautolock xsel wmname \
        redshift dunst picom expect xcolor \
        zathura zathura-djvu zathura-pdf-mupdf zathura-ps \
        newboat calcurse \
        freetype2 ttf-linux-libertine \
        bluez bluez-utils

    aur_install all-repository-fonts
}

# Install GRUB bootloader
grub_install() {
    printf 'GRUB_GFXMODE=%s,auto\n' "$AI_GRUB_RESOLUTION" >> /etc/default/grub

    # Enable theme
    [ ! -d '/boot/esp/EFI/GRUB/themes/tela/' ] \
        || printf 'GRUB_THEME="/boot/esp/EFI/GRUB/themes/tela/theme.txt"\n' >> /etc/default/grub

    # Enable os-prober
    grep -q 'GRUB_DISABLE_OS_PROBER=false' /etc/default/grub \
        || printf 'GRUB_DISABLE_OS_PROBER=false\n' >> /etc/default/grub

    # Install efishell (shellx64) and memtest86

    grub-install --target=x86_64-efi --efi-directory=/boot/esp --bootloader-id=GRUB
    grub-mkconfig -o /boot/grub/grub.cfg
}

# Install from AUR
aur_install() {
    su "$AI_USER_NAME" -c 'mkdir -p /tmp/aur'

    for package in $@; do
        git clone "https://aur.archlinux.org/$package.git/" "/tmp/aur/$package"
        chown -R "$AI_USER_NAME:$AI_USER_NAME" /tmp/aur/

        su "$AI_USER_NAME" -c "cd '/tmp/aur/$package/' && makepkg --noconfirm -s"
        pacman --noconfirm -U "/tmp/aur/$package"/*.pkg.tar.xz
    done

    rm -rf "/tmp/aur"
}

#######################################
#   Print error message to stderr
#   https://google.github.io/styleguide/shellguide.html
#######################################
err() { echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2; }

main "$@"; exit
